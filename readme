<!-- ðŸ“¦ package.json â€” The Brain of Your Node.js Project -->
âœ… What it is:
    package.json is a file that tells:
    What your project is called
    What packages (libraries) it needs
    Which command starts your app
    Any scripts you want to run (like start, test, etc.)

<!-- ðŸ“‚ node_modules â€” The Toolbox Folder -->
âœ… What it is:
    This folder stores all the packages (like express, ejs, etc.) that your project needs.
    When you run npm install, Node checks package.json and installs all listed dependencies into node_modules.

ðŸ“¦ Examples of what's inside:
    express/
    ejs/
    body-parser/ (if you use it)
    Many other nested packages

<!-- express -  -->
=>> Express is a web framework for Node.js that makes it easy to build web servers and APIs.
=>> It is like a "toolbox" built on top of Node.js to help you create websites or web apps quickly and easily.

ðŸ§± Without Express (only Node.js):
You have to manually handle:

    Routing (deciding what happens on /, /about, etc.)
    Sending HTML files
    Handling JSON or form data
    Writing a lot of boilerplate code

âœ… With Express:
You write less code and get more features like:

    Clean routing system
    Middleware support
    Easy handling of data (JSON, forms, etc.)
    Template engines like EJS
    Easy error handling

<!-- middleware -->
=>> A middleware is a function that runs in between the request from the user and the final response from the server.
=>> This is a global middleware(app.use) â€” it runs for every route.

app.use((req, res, next) =>{
    res.send("this is a middleware") // after execute this line no request goes next route
    const a = 2;
    const b = 4;
    console.log(a + b)
    return next(); // send request next route
})

<!-- ðŸ“¦ What is Morgan? -->
    Morgan is a logging tool for Express apps.
    It logs incoming requests to the server (method, URL, status, time, etc.).

Think of it like a CCTV for your server â€” it shows what requests are coming in, from where, and how the server is responding.

<!-- all types of request -->

1. get-request => taking data from server to backend, receive data in req.query
2. post-request => taking data from frontend to backend, receive data in req.body
 
    #by default any form calling get request - and if you want to calling post request then put method - 'post' in html attributes
    // for reading req.body data
        app.use(express.json());
        app.use(express.urlencoded({extended: true}))

#static files - without any restriction, authentication - direct accessible on frontend after requesting server